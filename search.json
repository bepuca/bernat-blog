[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/hdd-for-ai/index.html",
    "href": "posts/hdd-for-ai/index.html",
    "title": "Hypothesis Driven Development for AI Products",
    "section": "",
    "text": "TL;DR: This is the Diagram that summarizes the approach."
  },
  {
    "objectID": "posts/hdd-for-ai/index.html#introduction",
    "href": "posts/hdd-for-ai/index.html#introduction",
    "title": "Hypothesis Driven Development for AI Products",
    "section": "Introduction",
    "text": "Introduction\nIn regular software work, things usually happen as expected. You find a problem, figure out a solution, and, once implemented, it usually works fine. In machine learning, however, things are less predictable. Instead of writing out every step, we teach machines to learn tasks on their own1. But this brings uncertainty. Because they can handle tasks we wouldn’t know how to code directly, we can’t predict the outcome before we try. Even seasoned professionals often encounter unexpected situations.\nDue to this uncertainty, the typical methodology used in software engineering isn’t enough for machine learning projects. We need to add a more scientific approach to our toolkit: formulating hypotheses about potential solutions and then validating them. Only once a solution is proven effective can we trust that it solves our problem. This approach is known as Hypothesis Driven Development. Sometimes it is also referred as Continuous Experimentation.\nThe aim of this post is to offer guidance on how to implement this approach: a conceptual compass to help navigate the uncertainty while increasing the chances of success. In other words, it’s about maximizing the possibility of creating machine learning-powered products that have an impact in the real world.\nTo illustrate the process discussed here, we will consider two examples. One from the world of computer vision and the other from the world of Large Language Models:\n\nDetect defects in a production line.\nAnswer user questions related to a company’s internal documents.\n\n\n\n\n\n\n\nNote\n\n\n\nHypothesis-driven development is not new. Some teams even use it for projects unrelated to AI, employing it to manage uncertainty2. The distinction lies in the type of uncertainty addressed: rather than focusing on whether the software functions correctly, they’re more concerned with how certain product features impact outcomes (like whether a new landing page boost conversions)."
  },
  {
    "objectID": "posts/hdd-for-ai/index.html#problem-definition",
    "href": "posts/hdd-for-ai/index.html#problem-definition",
    "title": "Hypothesis Driven Development for AI Products",
    "section": "Problem Definition",
    "text": "Problem Definition\nPeople often start a new project with a rough idea of what they want to achieve. These ideas tend look like the examples introduced above. These definitions might be good high-level goals, but they are too vague to be actionable. We cannot know if we are successful or not. Thus, the first and most important step towards a successful project is to crystallize the problem definition. The situation will improve dramatically if we aim for the following three:\n\nEvaluation dataset – Imagine your ideal system as a black box. What inputs would you give it, and what outputs would you expect? Gathering these input-output pairs for all relevant scenarios is essential. Though it may be tedious and time-consuming, it’s arguably the most critical part of the project. Without it, you’re essentially flying blind. Investing time here will pay off ample dividends.\nEvaluators – Once the system produces outputs based on the evaluation dataset, you need to assess how close these outputs are to the desired ones. Evaluators quantify this closeness by generating metrics from pairs of actual and desired outputs. We may have multiple evaluators if we care about different things.3\nSuccess Criteria – What is the minimum performance we require to trust the system enough to use it in the real world.\n\nAfter going through the (painful but valuable) process, the illustrative examples now might look like this:\n\nDetect if there is any scratch in the iPhone 13 screen before assembling it to the phone. We require at most 0.5% False Negatives and 5% False Positives. We will evaluate using a dataset of 1000 picture-label pairs. Pictures are photos of screens. Labels indicate if the given screen is scratched or not.\nGiven an employee question, fetch the document sections that answer it. We require at least 80% average section recall and at least 30% average section precision. We will evaluate using a dataset of 100 questions and section set pairs.\n\nAs you may realize, these problem definitions give us a clear target and a clear way to know if we hit the target.\n\n\n\n\n\n\nCaution\n\n\n\nTask performance metrics aren’t the only considerations; there could be other factors like latency or cost. For example, a perfect prediction that takes 5 minutes wouldn’t be practical on a production line."
  },
  {
    "objectID": "posts/hdd-for-ai/index.html#the-inner-loop",
    "href": "posts/hdd-for-ai/index.html#the-inner-loop",
    "title": "Hypothesis Driven Development for AI Products",
    "section": "The Inner Loop",
    "text": "The Inner Loop\nOnce the problem is clear, we can start working on the solution. This is an iterative process that is often referred as the Inner Loop because there is no live interaction with the outside world. The steps are the following:\n\nFormulate a hypothesis – What can we try that might improve the results and move us closer to our goal? Looking at the results of the previous iteration, reading relevant material and discussing with colleagues are always safe bets to come up with new ideas.\nRun an experiment – Develop the artifacts to validate the hypothesis. This usually includes code and/or data. We may need to train a model or inject context to a Large Language Model prompt. If we need to do so, we will need data (and it cannot be our evaluation set). Thus, while not discussed explicitly in this post, there is usually a need for a data engine to ingest, process and manage data.\nEvaluate the results – We take the inputs of our evaluation set and pass them through the artifacts of our experiment to obtain outputs. Then, we feed these outputs paired with the desired outputs to our evaluators to obtain the offline metrics.\nDecide – If the results indicate improvement over the previous iteration, integrate the experiment’s work into the solution. If not, document the lessons learned and archive the work. At this point, we may choose to exit the inner loop and deploy the current solution to the real world or return to step 1 to formulate a new hypothesis and continue refining the system.\n\n\n\n\n\n\n\nNote\n\n\n\nA good analogy for this way of working is to consider it the Test-Driven Development for Machine Learning. The Problem Definition defines the test we need to pass, and the Inner Loop are our efforts to accomplish that.\n\n\nIn that same direction, investing in infrastructure to enable fast iteration and fast feedback loops is usually a good idea. The more ideas we can try per unit of time, the highest the chances we find the right one.\n\nThe Baseline\nWhen we enter the loop for the first time, we have nothing to iterate upon. Thus, we define our first hypothesis: the baseline. The goal of a baseline is not to solve the problem, but to allow us to start the iterative improvement. Thus, we prioritize simplicity and speed of implementation. Sensible baselines for our examples could be:\n\nIf average pixel intensity deviates more than 10% of average pixel intensity for non-scratched screens, label the picture as scratched.\nGiven a user question, retrieve the paragraphs that contain all the words in the user question (after removing the stop words)."
  },
  {
    "objectID": "posts/hdd-for-ai/index.html#the-outer-loop",
    "href": "posts/hdd-for-ai/index.html#the-outer-loop",
    "title": "Hypothesis Driven Development for AI Products",
    "section": "The Outer Loop",
    "text": "The Outer Loop\nOnce our solution meets the success criteria we defined in the beginning, we may enter the Outer Loop for the first time. This process does interact with the outside world (e.g., users), hence the outer. It consists of the following steps:\n\nDeploy – With what we believe is a functional solution, it’s time to introduce it to the real world so it becomes a product. Note that deploying or not is usually a business decision. Besides performance, other factors may come into play.\nObserve and monitor – Deployment marks the real test. We must ensure mechanisms are in place to track real-world interactions. This includes logging inputs, outputs, and user interactions. Sufficient data should be collected to accurately reconstruct system behavior, often referred to as traces.\nDigest – Always process what happens to the deployed system. This may involve manual inspection of data or labeling subsets for online metrics. Confidence in performance alignment with offline metrics is crucial.\nDecide – If real-world performance meets success criteria, you have two options:\n\n\nEnter maintenance mode: Take no further action unless performance degrades.\nRevisit your problem definition to be more ambitious in your success criteria or in the desired scope.\n\nIf performance falls short, it indicates flaws in the problem definition. This may involve updating the evaluation dataset, revisiting evaluators, or redefining success criteria. After updating the problem definition, re-enter the Inner Loop.\n\n\n\n\n\n\nCaution\n\n\n\nDeploying directly to production can be risky, as a faulty product could damage reputation or incur losses. However, the first deployment often yields valuable insights. Strategies to mitigate risks and gather learnings without significant impact are recommended. These strategies also signal readiness for full deployment, such as:\n\nShadow mode deployment: Run the model alongside existing systems without using its predictions, allowing for comparison.\nAlpha version rollout: Deploy to a subset of users aware they’re using a trial version, encouraging feedback."
  },
  {
    "objectID": "posts/hdd-for-ai/index.html#the-diagram",
    "href": "posts/hdd-for-ai/index.html#the-diagram",
    "title": "Hypothesis Driven Development for AI Products",
    "section": "The Diagram",
    "text": "The Diagram\n\n\n\nThe diagram of Hypothesis Driven Development for AI products, including the Inner and the Outer loops."
  },
  {
    "objectID": "posts/hdd-for-ai/index.html#recommended-practices",
    "href": "posts/hdd-for-ai/index.html#recommended-practices",
    "title": "Hypothesis Driven Development for AI Products",
    "section": "Recommended Practices",
    "text": "Recommended Practices\nWhile there are many ways to skin the proverbial cat, in my experience there are a few (interrelated) practices that maximize the chances of success:\n\nIterate small and iterate frequently - These endeavors are plagued with uncertainty. Each step teaches us something. If we walk in small steps, we will rarely walk in the wrong direction for long.\nStrive for full traceability – Hypotheses and experiments often number in the tens or even hundreds. Establishing infrastructure to track the origin of each result—both code and data—proves invaluable. If you cannot effectively reason about every result, you will get confused quickly. Tools like mlflow help on this front.\nWrite experiment documents – Similar to lab notebooks in science, keeping track of what was tried, why, what was expected and what ultimately happened is extremely valuable. Formalizing our thoughts in writing helps reflect on them and ground ourselves. Moreover, this practice streamlines sharing insights among team members and for future reference.\nBuild a leaderboard – Every project has stakeholders. At the very least, the developers are their first stakeholders. A centralized place where each experiment is displayed with its metrics helps demonstrate progress over time and can help boost morale and secure funding."
  },
  {
    "objectID": "posts/hdd-for-ai/index.html#closing-thoughts",
    "href": "posts/hdd-for-ai/index.html#closing-thoughts",
    "title": "Hypothesis Driven Development for AI Products",
    "section": "Closing Thoughts",
    "text": "Closing Thoughts\nWhile things are presented here somewhat linearly, the reality is often messier. It is hard to get the problem definition right on the first try. As you work on the problem, you discover things you did not anticipate. You are forced to revisit your assumptions and reformulate your goals. You may have to scrap big. You may decide to take a calculated risk and deviate from the standard path. Maybe relax success criteria to explore early product interest. All that is okay. That is just business as usual in the realm of AI. If you make some progress every day, there is a solid chance you will reach a valuable destination, even if not the one expected initially. Embrace uncertainty and enjoy the journey.\n\nThanks to Chris Hughes, Patrick Schuler and Marc Gomez for reviewing this article."
  },
  {
    "objectID": "posts/hdd-for-ai/index.html#footnotes",
    "href": "posts/hdd-for-ai/index.html#footnotes",
    "title": "Hypothesis Driven Development for AI Products",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAn interesting framing of this is Karpathy’s Software 2.0↩︎\nThis Thoughtworks article is a good introduction.↩︎\nYour AI Product Needs Evals is a good deeper dive into evaluators.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bernat Puig Camps",
    "section": "",
    "text": "Bernat Puig Camps\nAt the intersection of data science and software engineering, I enjoy striving to embed machine learning into useful and usable products and tools. I am interested in all things data science.  Applied Machine Learning @ Microsoft  Opinions my own.\n\n\n\n\n\n\n\n\n\n\n\n\nHypothesis Driven Development for AI Products\n\n\nLeveraging empirical science processes to deliver engineering projects\n\n\n\n\n\nApr 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nA layered approach to MLOps\n\n\nA tried and tested approach to structuring ML projects\n\n\n\n\n\nDec 20, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nYOLOv7: A Deep Dive into the Current State-of-the-Art for Object Detection\n\n\nEverything you need to know to use YOLOv7 in custom training scripts\n\n\n\n\n\nNov 25, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nError analysis for object detection models\n\n\nA systematic, data-driven approach to understanding what hinders a model’s performance\n\n\n\n\n\nJun 28, 2022\n\n\n\n\n\n\nNo matching items"
  }
]